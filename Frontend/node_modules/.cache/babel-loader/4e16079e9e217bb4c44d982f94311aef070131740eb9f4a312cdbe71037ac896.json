{"ast":null,"code":"var _jsxFileName = \"/Users/nainhaja/Desktop/ft_trans/Frontend/src/components/My_sketch.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport Sketch from \"react-p5\";\nimport { useEffect, useRef, useState } from 'react';\nimport { io } from \"socket.io-client\";\nimport Spectator from './spectator_mod';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SketchPong = () => {\n  _s();\n  const socket = useRef(null);\n  const gameState = useRef(null);\n  const [state, setState] = useState(\"waiting\");\n  const [Cpt, setCpt] = useState(0);\n  const [my_width, setWidth] = useState(window.innerWidth);\n  const [m_height, setHeight] = useState(window.innerHeight);\n  const getWindowSizee = () => {\n    const {\n      innerWidth,\n      innerHeight\n    } = window;\n    return {\n      innerWidth,\n      innerHeight\n    };\n  };\n  let ok = 0;\n  let hh = 0;\n  let yarb = 0;\n  const [layhfdk, setLayhfdk] = useState(0);\n  let button_cpt = 0;\n  let buttons = [];\n  let aspectRatio = 0;\n  let absoluteWidth = 0;\n  let relativeWidth = 0;\n  let absoluteHeight = 0;\n  let relativeHeight = 0;\n  let scalingRatio = 0;\n  function buttonPressed(nbr) {\n    button_cpt = 1;\n    console.log(\"nbr \" + nbr);\n    if (socket.current != null) socket.current.emit(\"spectJoin\", {\n      value: nbr\n    });\n    setState(\"started watching\");\n    //hh = c;\n    //buttons.splice(0, c);\n    //\n  }\n\n  useEffect(() => {\n    socket.current = io(\"http://localhost:5555\").on(\"connect\", () => {\n      var _socket$current, _socket$current3;\n      if (socket.current != null) {\n        socket.current.on('gameCount', data => {\n          hh = data;\n          setLayhfdk(+data);\n          console.log(\"wch a 3chiri \" + layhfdk);\n        });\n      }\n      if (state == \"play\" && layhfdk === 0) (_socket$current = socket.current) === null || _socket$current === void 0 ? void 0 : _socket$current.emit(\"player_join_queue\");else if (state == \"spect\") {\n        var _socket$current2;\n        (_socket$current2 = socket.current) === null || _socket$current2 === void 0 ? void 0 : _socket$current2.emit(\"spectJoined\");\n        if (socket.current != null) socket.current.on('gameCount', data => {\n          hh = data;\n          setLayhfdk(+data);\n          console.log(\"wch a 3chiri \" + layhfdk);\n        });\n      }\n      (_socket$current3 = socket.current) === null || _socket$current3 === void 0 ? void 0 : _socket$current3.on(\"queue_status\", data => {\n        if (state == \"waiting\") {}\n        gameState.current = data;\n      });\n      return () => {\n        var _socket$current4, _socket$current5;\n        (_socket$current4 = socket.current) === null || _socket$current4 === void 0 ? void 0 : _socket$current4.removeAllListeners();\n        (_socket$current5 = socket.current) === null || _socket$current5 === void 0 ? void 0 : _socket$current5.close();\n      };\n    });\n  }, [state, layhfdk]);\n  const setup = (p5, canvasParentRef) => {\n    p5.createCanvas(window.innerWidth / 2, window.innerWidth / 4).parent(canvasParentRef);\n    p5.background(122);\n  };\n  function draw(p5) {\n    function getWindowSize() {\n      const {\n        innerWidth,\n        innerHeight\n      } = window;\n      return {\n        innerWidth,\n        innerHeight\n      };\n    }\n    function get_window_height() {\n      return getWindowSize().innerHeight;\n    }\n    if (gameState.current != null) {\n      aspectRatio = gameState.current.aspectRatio;\n      absoluteWidth = gameState.current.width;\n      relativeWidth = getWindowSize().innerWidth / 2;\n      absoluteHeight = absoluteWidth / aspectRatio;\n      relativeHeight = relativeWidth / aspectRatio;\n      scalingRatio = relativeWidth / absoluteWidth;\n      console.log(\"MY section width is  \" + relativeWidth + \" my section height is \" + relativeHeight);\n    }\n    p5.resizeCanvas(window.innerWidth / 2, window.innerWidth / 4);\n    p5.background(122);\n    if (gameState.current != null) {\n      const drawClickToStartText = p5 => {\n        if (gameState.current != null && socket.current != null) {\n          let width = getWindowSize().innerWidth;\n          let height = getWindowSize().innerHeight;\n          if (gameState.current.state === \"scored\") {\n            p5.fill(0);\n            p5.textSize(relativeWidth / 35);\n            p5.textAlign(p5.CENTER);\n            const scores = gameState.current.scores;\n            const scoresSum = scores[0] + scores[1];\n            if (gameState.current.players.indexOf(socket.current.id) == -1) {\n              // this is in case it's a spectator he can only watch without interfering in the game because his id couldn't be find \n              // in the players id array \n              p5.text(\"Waiting for players to start the game\", width / 4, width / 16);\n            } else {\n              // in here both the players recieve text in the middle\n              // the one who scored is displaying the waiting text while the other one the click enter\n              // when he does click enter the ball gets respawned in the middle with the scores updated and the ball moving again\n              // thus creating a new partido if you would call it that \n\n              p5.text(socket.current.id === gameState.current.lastscored ? \"Waiting for oponent to start the game\" : \"Click enter to start the game \", width / 4, width / 16);\n            }\n          }\n        }\n      };\n      const drawScore = p5 => {\n        // this method will allow us to draw the score line of both players\n        // we start of by filling the whole screen black \n        // we allign the text in the center and we can rectrieve the score of each players using the gamestate that is constantly\n        //retrieving data from the backend of our code and then we display it\n        // how to create as many buttons as i want based on a number \n\n        p5.fill(0);\n        p5.textSize(getWindowSize().innerHeight * 20 / getWindowSize().innerHeight);\n        p5.textAlign(p5.CENTER);\n        //p5.resizeCanvas(getWindowSize().innerWidth, getWindowSize().innerHeight);\n        //console.log(relativeHeight);\n        if (gameState.current != null) {\n          p5.text(gameState.current.scores[0], getWindowSize().innerWidth / 32 * 7, getWindowSize().innerWidth / 8);\n          p5.text(gameState.current.scores[1], getWindowSize().innerWidth / 32 * 9, getWindowSize().innerWidth / 8);\n          if (gameState.current.state == \"endGame\") {\n            p5.text(\"Player 1 Won the game\", getWindowSize().innerWidth / 4, getWindowSize().innerWidth / 16);\n          }\n        }\n      };\n      //p5.clear();\n\n      // if (gameState.current.state == \"endGame\")\n      //   console.log(\"hana habibi\");\n      //console.log(\"Asbhan lah \" + gameState.current.state);\n      // p5.resizeCanvas(getWindowSize().innerWidth   , relativeHeight);\n      // p5.background(122);\n      drawClickToStartText(p5);\n      drawScore(p5);\n      console.log(\"Heres my aspect ratio \" + aspectRatio);\n      //the p5.rect method allows us to create a rectangle using the properties in the arguments x,y,width,heigh\n      p5.rect(gameState.current.fr_paddle_x * scalingRatio, gameState.current.fr_paddle_y * scalingRatio, gameState.current.paddle_width * scalingRatio, gameState.current.paddle_height * scalingRatio);\n      p5.rect(gameState.current.sec_paddle_x * scalingRatio, gameState.current.sec_paddle_y * scalingRatio, gameState.current.paddle_width * scalingRatio, gameState.current.paddle_height * scalingRatio);\n      //the p5.circle method allows us to create a circle using the properties in the arguments x,y,Raduis\n      p5.circle(gameState.current.ball_x * scalingRatio, gameState.current.ball_y * scalingRatio, gameState.current.ball_radius * scalingRatio);\n      if (socket.current != null) {\n        var _socket$current6;\n        const handlePlayerOneInput = p5 => {\n          // this is where we check for the first player's input and how he moves the paddles using W and S \n          // whenever he uses a key we emit an event called playerInput that will later on be received from the backend\n          // when the backend recieved the emit he will update the paddles properties(x,y) wether lesser or higher \n          //when the properties gets updated since wr using the same socket of the player he can retrieve the new x,y of paddles\n          //then we can clear the whole ground we playing on and design the paddls on it's new x and y \n          //since this update gets called infinitly it will look like it's moving based on your needs \n          if (socket.current != null && gameState.current != null) {\n            if (p5.keyIsDown(13) && socket.current.id !== gameState.current.lastscored) {\n              socket.current.emit(\"player_pressed_key\", {\n                input: \"ENTER\"\n              });\n            }\n            if (p5.keyIsDown(87)) {\n              socket.current.emit(\"player_pressed_key\", {\n                input: \"UP\"\n              });\n            }\n            if (p5.keyIsDown(83)) {\n              socket.current.emit(\"player_pressed_key\", {\n                input: \"DOWN\"\n              });\n            }\n          }\n        };\n        const handlePlayerTwoInput = p5 => {\n          if (socket.current != null && gameState.current != null) {\n            if (p5.keyIsDown(13) && socket.current.id !== gameState.current.lastscored) {\n              socket.current.emit(\"player_pressed_key\", {\n                input: \"ENTER\"\n              });\n            }\n            if (p5.keyIsDown(87)) {\n              socket.current.emit(\"player_pressed_key\", {\n                input: \"UP\"\n              });\n            }\n            if (p5.keyIsDown(83)) {\n              socket.current.emit(\"player_pressed_key\", {\n                input: \"DOWN\"\n              });\n            }\n          }\n        };\n        // \n        // ok in here like we know every player got a socket and every socket got an Id for ex adc24a4cad2c4adc mix of numbers and letters \n        // but how can we know which one of them is player1 and which one is player 2\n        // in here we use the indexOf method that can help us find the first occurence that is equal to the one we search for\n        // you can say we store these sockets id in an array arr = [\"Sdcsdcs51s0\", \"sdc5s5d2cs12\"];\n        // when we call arr.indexOf(\"Sdcsdcs51s0\") which is the first one it will print out 0 \n        //when we receive 1 or 0 or we call their own paddle updating functions\n        //console.log(\"Index is \"+(socket.current?.id));\n        if (gameState.current.players.indexOf((_socket$current6 = socket.current) === null || _socket$current6 === void 0 ? void 0 : _socket$current6.id) === 0) handlePlayerOneInput(p5);\n        if (gameState.current.players.indexOf(socket.current.id) === 1) handlePlayerTwoInput(p5);\n      }\n    }\n  }\n  //};\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: state === \"waiting\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto bg-gray-200 rounded-xl shadow border p-8 m-10\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"p-2 pl-5 pr-5 transition-colors duration-700 transform bg-indigo-500 hover:bg-blue-400 text-gray-100 text-lg rounded-lg focus:border-4 border-indigo-300\",\n        onClick: () => {\n          //alert()\n\n          setState(\"play\");\n          setCpt(Cpt + 1);\n        },\n        children: \"Play a Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          //alert() \n\n          setState(\"spect\");\n        },\n        children: \"Spectate a Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 9\n    }, this) : state === \"spect\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Spectator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-container\",\n      children: /*#__PURE__*/_jsxDEV(Sketch, {\n        setup: setup,\n        draw: draw\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 47\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n  return /*#__PURE__*/_jsxDEV(Sketch, {\n    setup: setup,\n    draw: draw\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 10\n  }, this);\n};\n_s(SketchPong, \"F/V2PbQ6T65r9cobblLS6iHYHQA=\");\n_c = SketchPong;\nexport default SketchPong;\nvar _c;\n$RefreshReg$(_c, \"SketchPong\");","map":{"version":3,"names":["React","Sketch","useEffect","useRef","useState","io","Spectator","SketchPong","socket","gameState","state","setState","Cpt","setCpt","my_width","setWidth","window","innerWidth","m_height","setHeight","innerHeight","getWindowSizee","ok","hh","yarb","layhfdk","setLayhfdk","button_cpt","buttons","aspectRatio","absoluteWidth","relativeWidth","absoluteHeight","relativeHeight","scalingRatio","buttonPressed","nbr","console","log","current","emit","value","on","data","removeAllListeners","close","setup","p5","canvasParentRef","createCanvas","parent","background","draw","getWindowSize","get_window_height","width","resizeCanvas","drawClickToStartText","height","fill","textSize","textAlign","CENTER","scores","scoresSum","players","indexOf","id","text","lastscored","drawScore","rect","fr_paddle_x","fr_paddle_y","paddle_width","paddle_height","sec_paddle_x","sec_paddle_y","circle","ball_x","ball_y","ball_radius","handlePlayerOneInput","keyIsDown","input","handlePlayerTwoInput"],"sources":["/Users/nainhaja/Desktop/ft_trans/Frontend/src/components/My_sketch.tsx"],"sourcesContent":["import React from \"react\";\nimport Sketch from \"react-p5\";\nimport p5Types from \"p5\";\n\nimport P5Wrapper from 'react-p5';\nimport p5 from 'p5';\nimport { Paddle } from \"./Lobby\"\nimport { GameState } from \"./Ball\"\nimport { ReactP5Wrapper } from \"react-p5-wrapper\";\nimport { useEffect, useRef, useState } from 'react';\nimport { io, Socket } from \"socket.io-client\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { stat } from \"fs\";\nimport  Spectator  from './spectator_mod';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\n\n\nconst SketchPong = () => {\n\n  const socket = useRef(null as null | Socket);\n  const gameState = useRef(null as null | GameState);\n  const [state, setState] = useState(\"waiting\");\n  const [Cpt, setCpt] = useState(0);\n\n\n  const [my_width, setWidth] = useState(window.innerWidth);\n  const [m_height, setHeight] = useState(window.innerHeight);\n\n  const getWindowSizee = () => {\n    const { innerWidth, innerHeight } = window;\n    return { innerWidth, innerHeight };\n  }\n\n\n\n\n  let ok = 0;\n  let hh = 0;\n  let yarb = 0;\n  const [layhfdk, setLayhfdk] = useState(0);\n  let button_cpt = 0;\n  let buttons: p5.Element[] = [];\n\n  let aspectRatio: number = 0;\n\n  let absoluteWidth: number = 0;\n  let relativeWidth: number = 0;\n\n  let absoluteHeight: number = 0;\n  let relativeHeight: number = 0;\n\n  let scalingRatio: number = 0;\n\n  function buttonPressed(nbr: number) {\n    button_cpt = 1;\n    console.log(\"nbr \" + nbr);\n    if (socket.current != null)\n      socket.current.emit(\"spectJoin\", { value: nbr });\n    setState(\"started watching\");\n    //hh = c;\n    //buttons.splice(0, c);\n    //\n  }\n\n  useEffect(() => {\n    socket.current = io(\"http://localhost:5555\").on(\"connect\", () => {\n\n    if (socket.current != null)\n    {\n        socket.current.on('gameCount', (data) => {\n        hh = data;\n        setLayhfdk(+ data);\n        console.log(\"wch a 3chiri \" + layhfdk);\n      });      \n    }\n    if (state == \"play\" && layhfdk === 0)\n      socket.current?.emit(\"player_join_queue\");\n      else if (state == \"spect\")\n      {\n\n        socket.current?.emit(\"spectJoined\");\n        if (socket.current != null)\n          socket.current.on('gameCount', (data) => {\n            hh = data;\n            setLayhfdk(+ data);\n            console.log(\"wch a 3chiri \" + layhfdk);\n          });\n      }\n\n      socket.current?.on(\"queue_status\", (data: GameState) => {\n\n        if (state == \"waiting\") {\n\n        }\n        gameState.current = data;\n      });\n\n      return () => {\n        socket.current?.removeAllListeners();\n        socket.current?.close();\n      }\n    });\n  }, [state, layhfdk]);\n\n\n  const setup = (p5: p5Types, canvasParentRef: Element) => {\n    p5.createCanvas(window.innerWidth / 2, (window.innerWidth / 4)).parent(canvasParentRef)\n    \n    p5.background(122);\n\n  }\n\n  function draw(p5: p5Types) {\n    function getWindowSize() {\n      const { innerWidth, innerHeight } = window;\n      return { innerWidth, innerHeight };\n    }\n\n    function get_window_height() {\n      return getWindowSize().innerHeight;\n    }\n    if (gameState.current != null) {\n      aspectRatio = gameState.current.aspectRatio;\n\n      absoluteWidth = gameState.current.width;\n      relativeWidth = getWindowSize().innerWidth / 2;\n\n\n      absoluteHeight = absoluteWidth / aspectRatio;\n      relativeHeight = (relativeWidth / aspectRatio);\n\n      scalingRatio = relativeWidth / absoluteWidth;\n      console.log(\"MY section width is  \" + relativeWidth + \" my section height is \" + relativeHeight);\n    }\n\n    p5.resizeCanvas(window.innerWidth /2 , window.innerWidth/4);\n    p5.background(122);\n\n    if (gameState.current != null) \n    {\n\n      const drawClickToStartText = (p5: p5Types) => {\n        if (gameState.current != null && socket.current != null) {\n\n\n          let width = getWindowSize().innerWidth;\n          let height = getWindowSize().innerHeight;\n          if (gameState.current.state === \"scored\") {\n            p5.fill(0);\n            p5.textSize(((relativeWidth) / 35));\n            p5.textAlign(p5.CENTER);\n            const scores = gameState.current.scores;\n            const scoresSum = scores[0] + scores[1];\n            if (gameState.current.players.indexOf(socket.current.id) == -1) {\n              // this is in case it's a spectator he can only watch without interfering in the game because his id couldn't be find \n              // in the players id array \n              p5.text(\"Waiting for players to start the game\",\n                (width) / 4,\n                width / 16\n              );\n            }\n            else {\n              // in here both the players recieve text in the middle\n              // the one who scored is displaying the waiting text while the other one the click enter\n              // when he does click enter the ball gets respawned in the middle with the scores updated and the ball moving again\n              // thus creating a new partido if you would call it that \n\n              p5.text(\n                socket.current.id === gameState.current.lastscored\n                  ? \"Waiting for oponent to start the game\"\n                  : \"Click enter to start the game \",\n                (width) / 4,\n                width / 16\n              );\n            }\n          }\n        }\n\n      };\n\n      const drawScore = (p5: p5Types) => {\n        // this method will allow us to draw the score line of both players\n        // we start of by filling the whole screen black \n        // we allign the text in the center and we can rectrieve the score of each players using the gamestate that is constantly\n        //retrieving data from the backend of our code and then we display it\n        // how to create as many buttons as i want based on a number \n\n        p5.fill(0);\n        p5.textSize((getWindowSize().innerHeight * 20) / getWindowSize().innerHeight);\n        p5.textAlign(p5.CENTER);\n        //p5.resizeCanvas(getWindowSize().innerWidth, getWindowSize().innerHeight);\n        //console.log(relativeHeight);\n        if (gameState.current != null) {\n          p5.text(\n            gameState.current.scores[0],\n            (getWindowSize().innerWidth / 32) * 7,\n            getWindowSize().innerWidth / 8\n          );\n          p5.text(\n            gameState.current.scores[1],\n            (getWindowSize().innerWidth / 32) * 9,\n            getWindowSize().innerWidth / 8\n          );\n          if (gameState.current.state == \"endGame\") {\n            p5.text(\"Player 1 Won the game\",\n              (getWindowSize().innerWidth) / 4,\n              getWindowSize().innerWidth / 16\n            );\n          }\n\n        }\n\n      };\n      //p5.clear();\n\n\n      // if (gameState.current.state == \"endGame\")\n      //   console.log(\"hana habibi\");\n      //console.log(\"Asbhan lah \" + gameState.current.state);\n      // p5.resizeCanvas(getWindowSize().innerWidth   , relativeHeight);\n      // p5.background(122);\n      drawClickToStartText(p5);\n      drawScore(p5);\n      console.log(\"Heres my aspect ratio \" + aspectRatio);\n      //the p5.rect method allows us to create a rectangle using the properties in the arguments x,y,width,heigh\n      p5.rect(gameState.current.fr_paddle_x * scalingRatio, gameState.current.fr_paddle_y * scalingRatio, gameState.current.paddle_width * scalingRatio, gameState.current.paddle_height * scalingRatio);\n\n      p5.rect(gameState.current.sec_paddle_x * scalingRatio, gameState.current.sec_paddle_y * scalingRatio, gameState.current.paddle_width * scalingRatio, gameState.current.paddle_height * scalingRatio);\n      //the p5.circle method allows us to create a circle using the properties in the arguments x,y,Raduis\n      p5.circle(gameState.current.ball_x * scalingRatio, gameState.current.ball_y * scalingRatio, gameState.current.ball_radius * scalingRatio);\n\n\n      if (socket.current != null) {\n        const handlePlayerOneInput = (p5: p5Types) => {\n          // this is where we check for the first player's input and how he moves the paddles using W and S \n          // whenever he uses a key we emit an event called playerInput that will later on be received from the backend\n          // when the backend recieved the emit he will update the paddles properties(x,y) wether lesser or higher \n          //when the properties gets updated since wr using the same socket of the player he can retrieve the new x,y of paddles\n          //then we can clear the whole ground we playing on and design the paddls on it's new x and y \n          //since this update gets called infinitly it will look like it's moving based on your needs \n          if (socket.current != null && gameState.current != null) {\n            if (p5.keyIsDown(13) && socket.current.id !== gameState.current.lastscored) {\n              socket.current.emit(\"player_pressed_key\", { input: \"ENTER\" });\n            }\n            if (p5.keyIsDown(87)) {\n              socket.current.emit(\"player_pressed_key\", { input: \"UP\" });\n            }\n\n            if (p5.keyIsDown(83)) {\n              socket.current.emit(\"player_pressed_key\", { input: \"DOWN\" });\n            }\n          }\n        }\n        const handlePlayerTwoInput = (p5: p5Types) => {\n          if (socket.current != null && gameState.current != null) {\n            if (p5.keyIsDown(13) && socket.current.id !== gameState.current.lastscored) {\n              socket.current.emit(\"player_pressed_key\", { input: \"ENTER\" });\n            }\n            if (p5.keyIsDown(87)) {\n              socket.current.emit(\"player_pressed_key\", { input: \"UP\" });\n            }\n            if (p5.keyIsDown(83)) {\n              socket.current.emit(\"player_pressed_key\", { input: \"DOWN\" });\n            }\n          }\n\n        }\n        // \n        // ok in here like we know every player got a socket and every socket got an Id for ex adc24a4cad2c4adc mix of numbers and letters \n        // but how can we know which one of them is player1 and which one is player 2\n        // in here we use the indexOf method that can help us find the first occurence that is equal to the one we search for\n        // you can say we store these sockets id in an array arr = [\"Sdcsdcs51s0\", \"sdc5s5d2cs12\"];\n        // when we call arr.indexOf(\"Sdcsdcs51s0\") which is the first one it will print out 0 \n        //when we receive 1 or 0 or we call their own paddle updating functions\n        //console.log(\"Index is \"+(socket.current?.id));\n        if (gameState.current.players.indexOf(socket.current?.id) === 0)\n          handlePlayerOneInput(p5);\n        if (gameState.current.players.indexOf(socket.current.id) === 1)\n          handlePlayerTwoInput(p5);\n      }\n\n    }\n  }\n  //};\n  return <>\n\n    {\n      state === \"waiting\" ?\n        <div className=\"container mx-auto bg-gray-200 rounded-xl shadow border p-8 m-10\">\n          <button className=\"p-2 pl-5 pr-5 transition-colors duration-700 transform bg-indigo-500 hover:bg-blue-400 text-gray-100 text-lg rounded-lg focus:border-4 border-indigo-300\" onClick={() => {\n            //alert()\n\n            setState(\"play\");\n            setCpt(Cpt + 1);\n\n          }}\n          >\n            Play a Game\n          </button>\n\n          <button onClick={() => {\n            //alert() \n            \n            setState(\"spect\")\n\n          }}\n          >\n            Spectate a Game\n          </button>\n        </div>\n\n\n        : (state === \"spect\" ?\n          \n          <div>\n            {/* {Array.from({ length: layhfdk }, (v, i) => i + 1).map(i => (\n              <button key={i} onClick={() => buttonPressed(i)}>YAWDI HAAAANAAAAA {i}</button>\n            ))} */}\n            <Spectator/>\n          </div>\n          : <div className=\"canvas-container\"><Sketch setup={setup} draw={draw}  /></div>)\n\n\n\n    }\n\n  </>\n  return <Sketch setup={setup} draw={draw} />;\n};\n\n\nexport default SketchPong;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}